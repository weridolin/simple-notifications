// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"
	"time"

	scheduler "github.com/weridolin/simple-vedio-notifications/servers/tasks/cmd/rest/internal/handler/scheduler"
	task "github.com/weridolin/simple-vedio-notifications/servers/tasks/cmd/rest/internal/handler/task"
	"github.com/weridolin/simple-vedio-notifications/servers/tasks/cmd/rest/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/task",
				Handler: task.CreateTaskHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/task/:id",
				Handler: task.UpdateTaskHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/task/:id",
				Handler: task.DeleteTaskHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/task",
				Handler: task.QueryTaskHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/task/bind",
				Handler: task.BindTaskHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
		rest.WithTimeout(10000*time.Millisecond),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/scheduler",
				Handler: scheduler.CreateSchedulerHandler(serverCtx),
			},
			{
				Method:  http.MethodPut,
				Path:    "/scheduler/:id",
				Handler: scheduler.UpdateSchedulerHandler(serverCtx),
			},
			{
				Method:  http.MethodDelete,
				Path:    "/scheduler/:id",
				Handler: scheduler.DeleteSchedulerHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/scheduler",
				Handler: scheduler.QuerySchedulerHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.JwtAuth.AccessSecret),
		rest.WithPrefix("/api/v1"),
		rest.WithTimeout(10000*time.Millisecond),
	)
}
